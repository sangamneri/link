#include<stdio.h>
#include<malloc.h>
struct node
{ int data;
struct node *left,*right;
};
struct node *create(struct node *root)
{ struct node *
nw=NULL,*ptr=NULL;
int i,n;
printf("\n how many values: ");
scanf("%d",&n);
printf("\nEnter Actual values: ");
for(i=0;i<n;i++)
{ nw=(struct node *)malloc(sizeof(struct node));
scanf("%d",&nw->data);
nw->left=nw->right=NULL;
if(root==NULL)
root=nw;
else
{ ptr=root;
while(ptr!=NULL)
{ if(nw->data< ptr->data)
{ if(ptr->left==NULL)
{ ptr->left=nw;
break;
} else
ptr=ptr->left;
} else if(nw->data>ptr->data)
{ if(ptr->right==NULL)
{ ptr->right=nw;
break;
} else
ptr=ptr->right;
}}}} return(root);
} struct node *insert(struct node *root)
{ struct node *nw=NULL,*ptr=NULL;
printf("\nEnter the value to insert:");
nw=(struct node *)malloc(sizeof(struct node));
scanf("%d",&nw->data);
nw->left=nw->right=NULL;
if(root==NULL)
root=nw;
else
{ ptr=root;
while(ptr!=NULL)
{ if(nw->data<ptr->data)
{ if(ptr->left==NULL)
{ ptr->left=nw;
break;
} else
ptr=ptr->left;
} else if(nw->data>ptr->data)
{ if(ptr->right==NULL)
{ ptr->right=nw;
break;
} else
ptr=ptr->right;
}}} return(root);
}
 void preorder(struct node *root)
{ struct node *ptr=NULL;
ptr=root;
if(ptr!=NULL)
{ printf("%d\t",ptr->data);
preorder(ptr->left);
preorder(ptr->right);
}} 
 int search(struct node *root,int n)
{
struct node *ptr=NULL;
ptr=root;
if(n==ptr->data)
return 1;
else if(n<ptr->data)
search(ptr->left,n);
else if(n>ptr->data)
search(ptr->right,n);
else
return 0;
}
void main()
{ struct node *root=NULL;
int ch,q=0,n,x;
struct node *create();
struct node *insert();
void inorder();
void preorder();
void postorder();
int search();
do
{ printf("\n1.CREATE\n2.PREORDER\n3.SEARCH\n4.EXIT");
printf("\n Enter your choice: ");
scanf("%d",&ch);
switch(ch)
{ case 1:root=create(root);
break;
case 2:preorder(root);
break;
case 3:printf("\n Enter the value to search:");
scanf("%d",&n);
x=search(root,n);
if(x==1)
printf("\n Element is Found");
else
printf("\n Element is not Found");
break;
case 4:q=1;
break;
} }
while(q==0);
}